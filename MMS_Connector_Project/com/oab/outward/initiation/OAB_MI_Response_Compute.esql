





BROKER SCHEMA com.oab.outward.initiation
/*Author : Sandhya Sudharshan
Subsequent Modifications by : Lokesh Bellana
Module Name : Mandate_Response
Flow Name : Mandate_Response
Purpose : Response states whether Mandate request is accepted or rejected, update the response in the Database.
Dependency Module : Handler_CBO.
Dependency Database : Yes,MANDATE_MGMT_INFO.
Dependency XSD(Request Message) : pain.009.001.04.xsd, pain.010.001.04.xsd, pain.011.001.04.xsd.
Dependency XSD(Response Message) : pain.012.001.04.xsd
Dependency CBS : No.
Description :
1. Receives Response from CBO in th form of ISO.
2. Pick each transaction response from Input Message and does the following. For each such transaction following is done.
a. Check whether the Mandate transaction is accepted or rejected.
b. If Mandate request is success, then store in Environment(update the database),Construct XML format and send to OAB with Acceptance.
c. If Mandate request is failure, then store in Environment(update the database), Construct XML format and send to OAB with Rejection.
*/
DECLARE ns4 NAMESPACE 'urn:iso:std:iso:20022:tech:xsd:pain.012.001.04';

CREATE COMPUTE MODULE OAB_MI_Response_Compute
	DECLARE rc BOOLEAN;
	DECLARE flowName CHARACTER MessageFlowLabel;
	DECLARE MANDATE_MGMT_INFO EXTERNAL CHARACTER;
	DECLARE SCHEMA_NAME EXTERNAL CHARACTER;
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;
	DECLARE srcMsg CHARACTER;


	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		DECLARE bool BOOLEAN;
		CALL CopyEntireMessage()INTO bool;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() RETURNS BOOLEAN BEGIN


		IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
			SET Environment.Properties = InputRoot.Properties;
			SET Environment.XMLNSC = InputRoot.XMLNSC;
			SET Environment.variables.count = 3;
			DECLARE srcMsgBlob BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
			SET srcMsg = CAST(srcMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			SET Environment.srcMsg = srcMsg;

			CALL writeToLogFile(flowName, 'MMSOUT_INFO', 'INFO',' --------------------------------') INTO rc;
			CALL writeToLogFile(flowName, 'MMSOUT_INFO', 'INFO',' Recieving request message from CBS and updating status as MANDATE_SUCCESS or MANDATE_FAILED') INTO rc;
			SET Environment.MSGID = InputRoot.XMLNSC.ns4:Document.ns4:MndtAccptncRpt.ns4:GrpHdr.ns4:MsgId;
			DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ns4:Document.ns4:MndtAccptncRpt.ns4:UndrlygAccptncDtls[>];			
			-----------Updating the Response----------
			DECLARE STATUS CHARACTER inputRef.ns4:AccptncRslt.ns4:Accptd;
			SET Environment.STATUS_INFO = inputRef.ns4:AccptncRslt.ns4:AddtlRjctRsnInf;
			SET Environment.MID = inputRef.ns4:OrgnlMndt.ns4:OrgnlMndtId;
			IF STATUS = 'False' THEN
				CALL writeToLogFile(flowName, 'MMSOUT_INFO', 'INFO','Updating status as MANDATE_FAILED in TXN table for OrgnlMndtId - '|| Environment.MID) INTO rc;
				SET Environment.dbQueryCount = '12';
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				IF Environment.Exception = 'True' THEN
					RETURN FALSE;
				END IF;
			ELSE
				SET Environment.dbQueryCount = '13';
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				IF Environment.Exception = 'True' THEN
					RETURN FALSE;
				END IF;
				
			END IF;		



			CALL writeToLogFile(flowName, 'MMSOUT_INFO', 'INFO',' --------------END------------------') INTO rc;
		ELSE
			IF Environment.variables.count >= 1 THEN
				--DECLARE SleepFlow BOOLEAN SLEEP(5*1000);
				--SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				-- SET Environment.variables.count = Environment.variables.count - 1;
				-- SET OutputExceptionList = InputExceptionList;
				-- PROPAGATE TO TERMINAL 'out2' DELETE NONE;
			ELSE
				SET OutputRoot.Properties = Environment.Properties;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(Environment.srcMsg,Environment.Properties.Encoding,Environment.Properties.CodedCharSetId);
				SET OutputExceptionList = InputExceptionList;
				SET Environment.RetryQueue = 'MMS_RETRY_Q';
				PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				SET Environment.Exception = 'True';
				RETURN FALSE;
			END IF;
		END IF;
	END;
END MODULE;