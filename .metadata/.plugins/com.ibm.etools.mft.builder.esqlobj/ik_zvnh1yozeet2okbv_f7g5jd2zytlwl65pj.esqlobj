CREATE COMPUTE MODULE Common_ExceptionDecisionprocess
	DECLARE rc BOOLEAN;
	DECLARE flowName CHARACTER MessageFlowLabel;
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER ;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL initLog4j(LOG4J_CONF_FILE) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET msg = 'Log4J Initialization failed.';
		END IF;
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN


		DECLARE inref REFERENCE TO InputRoot;
		DECLARE Exc_desc CHARACTER;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		SET Exc_desc = getExceptionDesc(InputRoot,OutputRoot,InputExceptionList);
		SET ccsid = COALESCE(ccsid,'1208');

		CALL originalMsg(ccsid,inref);

		CALL writeToLogFile(flowName, 'EXC_INFO', 'INFO',' -----------START--------') INTO rc;
		CALL writeToLogFile(flowName, 'EXC_INFO', 'INFO','DESCRIPTION') INTO rc;
		CALL writeToLogFile(flowName, 'EXC_INFO', 'INFO',Exc_desc) INTO rc;
		CALL writeToLogFile(flowName, 'EXC_INFO', 'INFO',' -----------END--------') INTO rc;

		SET OutputRoot.XMLNSC.MSG.ExceptionDetails = '';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.MSG.ExceptionDetails;
		SET OutRef.ExceptionName = SUBSTRING(CAST(Exc_desc AS CHARACTER) BEFORE ':');
		SET OutRef.Description = SUBSTRING(CAST(Exc_desc AS CHARACTER) AFTER ':');
		SET OutRef.OrgMsg = Environment.Variables.TraceFileExc.originalMessage;
		SET OutRef.TimeStamp = CURRENT_TIMESTAMP;
		SET OutRef.FlowName = flowName;
		SET OutRef.dbQueryCount = Environment.dbQueryCount;
		SET OutRef.filename = COALESCE(Environment.InputFileName,'NA');
	
		
		
		IF CONTAINS(OutRef.ExceptionName, 'DatabaseException') THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.RetryQueue;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = 'EXC_MSG_Q_MPO';
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[3].queueName = 'EMAIL.IN.Q';
		ELSE
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'EXC_MSG_Q_MPO';
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = 'EMAIL.IN.Q';
		END IF;

	END;
	CREATE PROCEDURE originalMsg (IN ccsid INTEGER, IN InputRoot REFERENCE)
	BEGIN
		--If error occurs capture the original message
		DECLARE domainFldName CHARACTER FIELDNAME(InputBody);

		IF domainFldName = 'DFDL' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = ASBITSTREAM(InputRoot.DFDL.* CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		ELSEIF domainFldName = 'XMLNSC' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)AS CHARACTER CCSID 1208);
		ELSEIF domainFldName = 'SOAP' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = ASBITSTREAM(InputRoot.SOAP.* CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		ELSEIF domainFldName = 'BLOB' THEN
			SET Environment.Variables.TraceFileExc.originalMessage = InputRoot.BLOB.BLOB;
		END IF;
	END;
	CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
	RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";


	CREATE FUNCTION writeToLogFile( IN COMPONENT_NAME CHARACTER,
	IN LOGGER_NAME CHARACTER,
	IN LEVEL CHARACTER,
	IN TEXT CHARACTER )
	RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
END MODULE;