CREATE COMPUTE MODULE CBO_RES_Compute

	DECLARE REVI_GRP_HEADER_INFO EXTERNAL CHARACTER; --Table Used to get header details to Generate CBO Response:REVI_GRP_HEADER_INFO
	DECLARE REVI_TXN_INFO EXTERNAL CHARACTER; --Table Used to get Transaction details to Generate CBO Response:REVI_TXN_INFO
	DECLARE SCHEMA_NAME EXTERNAL CHARACTER; --Database Schema name:esbach
	DECLARE CBOACH EXTERNAL CHARACTER; --Dsn name
	DECLARE ACH_CONFIG_VALUES EXTERNAL CHARACTER; --Table used to get the configurable values:DC_CONFIG_VALUES
	
	DECLARE rc BOOLEAN;
	DECLARE flowName CHARACTER MessageFlowLabel;
	DECLARE ORGNL_TX_ID CHARACTER InputRoot.XMLNSC.ns1:Document.ns1:FIToFIPmtRvsl.ns1:TxInf.ns1:OrgnlTxId;
	--DECLARE ORGNL_TX_ID CHARACTER InputRoot.XMLNSC.ns1:Document.ns1:FIToFIPmtRvsl.ns1:TxInf.ns1:OrgnlTxId;
	DECLARE count INTEGER 3;
	DECLARE seqCount INTEGER 1;
	DECLARE alpha CHARACTER;-- to get the random alphabetic number from the java code.
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
	
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO',' -------------------------') INTO rc;

		DECLARE ACHConfig ROW;
		SET ACHConfig.values[] = SELECT C.BANK_PREFIX,C.INSTAGT_FN_BICFI FROM Database.{SCHEMA_NAME}.{ACH_CONFIG_VALUES} AS C;
		CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO','Fetching Message ID from Header table where txn status is REVI_EXTSYS_APPROVED_CBO_SEND or REVI_EXTSYS_REJECTED_CBO_SEND') INTO rc;
		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		-- Fetching data from REVI_GRP_HEADER_INFO table where corresponding txns status is REVI_EXTSYS_REJECTED_CBO_SEND or REVI_EXTSYS_REJECTED_CBO_SEND --
		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		DECLARE SQL CHARACTER 'SELECT DISTINCT A.REV_GRP_HEADER_ID,A.INSTG_AGT_FIN_ID_BICFI,A.INSTD_AGT_FIN_ID_BICFI,A.INSTD_AGT_BRNCHID_ID,A.INSTG_AGT_BRNCHID_ID,A.MSG_ID
		FROM '||SCHEMA_NAME||'.'||REVI_GRP_HEADER_INFO||' A,'||SCHEMA_NAME||'.'||REVI_TXN_INFO||' T WHERE A.REV_GRP_HEADER_ID = T.REV_GRP_HDR_ID_TXN_INFO_FK AND (T.STATUS = ? OR T.STATUS = ?)';


		DECLARE headerRef ROW;
		SET headerRef.data[] = PASSTHRU(SQL TO Database.{CBOACH} VALUES('REVI_DBT_OC_SUCCESS','REVI_DBT_OC_FAILED'));		



		DECLARE resRef REFERENCE TO headerRef.data[>];
		WHILE LASTMOVE(resRef) DO
			DECLARE idRef INTEGER CAST(resRef.REV_GRP_HEADER_ID AS INTEGER);
			-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			--generating Batch Sequence(MsgID) which is in the format BankCode(4digit)+CurrentDate(yyMMdd)+Sequence(001)--
			-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


			DECLARE currDay,currDate,estSeq,previousDate CHARACTER;
			SET currDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'YYYYMMdd');

		DECLARE DD ROW;
			DECLARE GroupID INTEGER;
			SET GroupID = SELECT MAX(J.REV_GRP_HDR_ID_TXN_INFO_FK) FROM Database.{SCHEMA_NAME}.{REVI_TXN_INFO} AS J WHERE J.MSG_ID IS NOT NULL; --SUBSTRING(bchId FROM 9 FOR 2); -- if contains, extracting date from it
			SET Environment.recCount = SELECT COUNT ( * ) FROM Database.{SCHEMA_NAME}.{REVI_GRP_HEADER_INFO};

			IF Environment.recCount =1 AND bchSeq > 0 THEN
				SET bchSeq = bchSeq + 1;
			ELSE
				SET DD.V[] = SELECT K.CREATION_DATETIME FROM Database.{SCHEMA_NAME}.{REVI_GRP_HEADER_INFO} AS K WHERE K.REV_GRP_HEADER_ID = GroupID;
				SET previousDate = SUBSTRING(Environment.DD.V.CREATION_DATETIME FROM 1 FOR 8);
				IF LENGTH(bchId) > 0 THEN -- checking if there is any previous BatchID value in shared variable
					IF seqCount = 1 THEN
						IF previousDate = currDate THEN
							SET bchSeq = bchSeq + 1; --if previous BatchID date is same as current date, then incrementing by 1
						ELSE
							SET bchSeq = 1; -- if dates are not same then starting new sequence from 1
							SET seqCount = seqCount + 1;
						END IF;
					ELSE
						SET bchSeq = bchSeq + 1;
					END IF;

				ELSE -- if there is no previous BatchID value in shared variable
					DECLARE DB,ref ROW;
					SET DB.V[] = SELECT J.MSG_ID FROM Database.{SCHEMA_NAME}.{REVI_TXN_INFO} AS J WHERE J.MSG_ID LIKE ACHConfig.values.BANK_PREFIX ||'%';
					IF CARDINALITY(DB.V[]) > 0 AND previousDate = currDate THEN --- checking in DB, MsgId column whether there is a sequence with current date
						DECLARE maxId INTEGER;
						--SET maxId = SELECT MAX(GP.REV_GRP_HEADER_ID) FROM Database.{SCHEMA_NAME}.{REVI_GRP_HEADER_INFO} AS GP ;
						SET ref.NM[] = SELECT A.MSG_ID FROM Database.{SCHEMA_NAME}.{REVI_TXN_INFO} AS A WHERE A.REV_GRP_HDR_ID_TXN_INFO_FK = GroupID;
						DECLARE maxIdSeq,maxIdChar CHARACTER;
						SET maxIdChar = CAST(ref.NM.MSG_ID AS CHARACTER);
						SET maxIdSeq = SUBSTRING(maxIdChar FROM 11 FOR 3);
						DECLARE newSeq INTEGER;
						SET newSeq = CAST(maxIdSeq as INTEGER);
						SET bchSeq = newSeq + 1; -- if there incrementing by 1

					ELSE -- if not there then starting with 1
						SET bchSeq = 1;
						SET seqCount = seqCount + 1;
					END IF;
				END IF;
			END IF;

			DECLARE j CHARACTER;
			SET j = CAST(bchSeq AS CHARACTER);
			SET alpha = random(count);
			SET bchId = ACHConfig.values.BANK_PREFIX || '1' || 'I' || alpha || CAST(RIGHT('0000'||j,4) AS CHARACTER);


			DECLARE transDetails ROW;
			SET transDetails.record[] = SELECT A.STATUS,A.RVSL_ID,A.ORGNL_TX_ID FROM Database.{SCHEMA_NAME}.{REVI_TXN_INFO} AS A WHERE A.REV_GRP_HDR_ID_TXN_INFO_FK= idRef;
			--=============| Creating ISO Header |==============--
			SET OutputRoot.XMLNSC.ns4:Document.(XMLNSC.NamespaceDecl)xmlns = ns4;
			SET OutputRoot.XMLNSC.ns4:Document.(XMLNSC.NamespaceDecl)xmlns:ns22 = ns22;
			SET OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt.ns4:GrpHdr = '';
			DECLARE isogrpheader REFERENCE TO OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt.ns4:GrpHdr;
			SET isogrpheader.ns4:MsgId = bchId;
			SET isogrpheader.ns4:CreDtTm = CAST(CURRENT_TIMESTAMP as CHARACTER FORMAT 'YYYY-MM-dd''T''HH:mm:ss.sss+hh:mm');
			SET isogrpheader.ns4:InstgAgt.ns4:FinInstnId.ns4:BICFI = 'OMABOMRU';
			SET isogrpheader.ns4:InstdAgt.ns4:FinInstnId.ns4:BICFI = resRef.INSTG_AGT_FIN_ID_BICFI;
			SET OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt.ns4:OrgnlGrpInfAndSts = '';
			DECLARE IsoOrgInfSts REFERENCE TO OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt.ns4:OrgnlGrpInfAndSts;

			SET IsoOrgInfSts.ns4:OrgnlMsgId = resRef.MSG_ID;
			SET IsoOrgInfSts.ns4:OrgnlMsgNmId = 'pacs.007.001.05';


			IF transDetails.record.STATUS = 'REVI_DBT_OC_SUCCESS' THEN
				--=========| Creating Original Group Information status |===============--
				SET Environment.GrpSts = 'ACSC';
				SET Environment.Status = 'REVI_SUCCESS';
				SET Environment.description = 'Transaction was success at CBS System  and sent to CBO';
				SET IsoOrgInfSts.ns4:GrpSts = 'ACSC'; ---- Conform once these groupsts
			ELSE
				SET Environment.GrpSts = 'RJCT';
				SET Environment.Status = 'REVI_FAILED';
				SET Environment.description = 'Transaction Failed at CBS System and sent to CBO';
				SET IsoOrgInfSts.ns4:GrpSts = 'RJCT';

			END IF;
			--========| Creating ISO body For success Txn |=========--


			DECLARE stsId CHARACTER;

			SET stsId = bchId || '001';

			SET OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt.ns4:TxInfAndSts = '';
			DECLARE isobody REFERENCE TO OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt;
			SET isobody.ns4:TxInfAndSts.ns4:StsId = stsId;
		--	SET isobody.ns4:TxInfAndSts.ns4:OrgnlEndToEndId = transDetails.record.ORGNL_TX_ID;
			SET isobody.ns4:TxInfAndSts.ns4:OrgnlTxId = transDetails.record.RVSL_ID; ---check once
			SET isobody.ns4:TxInfAndSts.ns4:TxSts = Environment.GrpSts;
			IF Environment.GrpSts = 'ACSC' THEN
				---- StsRsnInf is populated only when Status is RJCT
				
			ELSE
				SET isobody.ns4:TxInfAndSts.ns4:StsRsnInf.ns4:Rsn.ns4:Prtry= '111'; ----Conform Once From where we need to populate that Fault Codes
				SET isobody.ns4:TxInfAndSts.ns4:StsRsnInf.ns4:AddtlInf = '';
			END IF;

			SET ORGNL_TX_ID = transDetails.record.ORGNL_TX_ID;


			CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO','Updating status as'|| Environment.Status || 'in TXN table for ORGNL_TX_ID - '||ORGNL_TX_ID) INTO rc;
			--=============| updating DB with success status code |==========--
			UPDATE Database.{SCHEMA_NAME}.{REVI_TXN_INFO} AS R SET STATUS = Environment.Status ,DESCRIPTION = Environment.description, MSG_ID = bchId ,TXN_ID  = stsId WHERE R.STATUS = transDetails.record.STATUS AND R.REV_GRP_HDR_ID_TXN_INFO_FK = idRef ;
			CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO','Inserting status as' || Environment.Status || 'in STATUS table for ORGNL_TX_ID - '||ORGNL_TX_ID) INTO rc;
--			INSERT INTO Database.{SCHEMA_NAME}.{STATUS_TABLE_NAME}(TXN_END_TO_END_ID,STATUS,STATUS_UPDATED_TIMESTAMP,TXN_TYPE) VALUES (ORGNL_TX_ID,Environment.Status,CURRENT_TIMESTAMP,'REVI');





			DECLARE supRef REFERENCE TO OutputRoot.XMLNSC.ns4:Document.ns4:FIToFIPmtStsRpt;
			CREATE LASTCHILD OF supRef AS supRef NAMESPACE ns4 NAME 'SplmtryData';
			CREATE LASTCHILD OF supRef AS supRef NAMESPACE ns4 NAME 'Envlp';
			CREATE LASTCHILD OF supRef AS supRef NAMESPACE ns22 NAME 'supplementaryData';
			CREATE LASTCHILD OF supRef AS supRef NAMESPACE ns22 NAME 'Items';
			SET supRef.ns22:Item = '2';
			SET supRef.ns22:Item.(XMLNSC.Attribute)key = 'batchSource';

			CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO','Sending ISO response to CBO') INTO rc;
			PROPAGATE TO TERMINAL 'out';


			MOVE resRef NEXTSIBLING;
		END WHILE;
		CALL writeToLogFile(flowName, 'REVI_INFO', 'INFO',' -------------------------') INTO rc;
	END;
END MODULE;