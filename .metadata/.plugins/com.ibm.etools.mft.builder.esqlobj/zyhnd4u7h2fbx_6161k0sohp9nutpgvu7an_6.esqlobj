CREATE COMPUTE MODULE DCI_CBS_Response_Updating_CBS_TRAN_REF

	DECLARE DC_TXN_TABLE EXTERNAL CHARACTER; -- This table is used to store the transaction details: DCI_TXN_INFO.
	DECLARE SCHEMA_NAME EXTERNAL CHARACTER; --Schema name of the database.
	DECLARE DSN EXTERNAL CHARACTER; --Data source for connecting the database.
	DECLARE rc BOOLEAN;
	DECLARE txn_end_id CHARACTER;
	DECLARE insertStatusQuery CHARACTER;
	DECLARE insertRes ROW;
	DECLARE flowName CHARACTER MessageFlowLabel;
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;
	DECLARE MaxCbsRetryCount EXTERNAL INTEGER;
	DECLARE CbsRetryCount INTEGER 1;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
			SET Environment.Properties = InputRoot.Properties;
			SET Environment.XMLNSC = InputRoot.XMLNSC;
			CALL writeToLogFile(flowName, 'dci_info', 'INFO',' -------------------------') INTO rc;
			SET Environment.payment_ref = InputRoot.XMLNSC.*:Reply.*:Header.*:transactionReference;
			SET Environment.replay_status = InputRoot.XMLNSC.*:Reply.*:Header.*:replyStatus;
			SET Environment.reference = InputRoot.XMLNSC.*:Reply.*:Data.*:FinancialTransaction.*:reference;
			SET Environment.txn_end_id = SUBSTRING(Environment.payment_ref FROM 19);
			--===========| Updating STATUS_CODE in DCI_TXN_INFO table based on CBS replyStatus |===========--

			IF Environment.payment_ref LIKE '10%' THEN
				CALL writeToLogFile(flowName, 'dci_info', 'INFO','Response received from CBS with ref - ' || Environment.payment_ref) INTO rc;

				IF Environment.replay_status ='FIN' THEN

					CALL writeToLogFile(flowName, 'dci_info', 'INFO','Success Response received for Crediting Ordering Customer Account with END_TO_END_ID - '||Environment.txn_end_id) INTO rc;
					CALL writeToLogFile(flowName, 'dci_info', 'INFO','Updating status as DCI_CBS_CRDT_OC_SUCCESS in TXN table') INTO rc;
					SET Environment.dbQueryCount = '6';
					SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);

				ELSE

					SET Environment.faultString = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultString;
					SET Environment.faultCode = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultCode;
					SET Environment.cbsfail = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultString;
					SET Environment.faultNumber = COALESCE(InputRoot.XMLNSC.*:Reply.*:Fault.*:detail.*:faultNumber,'');



					IF Environment.faultNumber='2999' OR Environment.faultNumber ='2996' THEN
						SET Environment.dbQueryCount = '7A';
						CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
						SET Environment.CBSCOUNT= CAST(SUBSTRING(Environment.CbsCount.FAULT_CODE AFTER ':') AS INTEGER);
						IF Environment.CBSCOUNT IS NOT NULL THEN
							IF Environment.CBSCOUNT < MaxCbsRetryCount THEN
								SET CbsRetryCount = CAST(Environment.CBSCOUNT AS INTEGER) + 1;
								SET Environment.STATUS= 'DCI_CBS_CRDT_OC_SENT';
								SET Environment.faultNumber = Environment.faultNumber ||':'|| CAST(CbsRetryCount AS CHARACTER);
							ELSE
								SET Environment.STATUS= 'DCI_CBS_CRDT_OC_FAILED';
							END IF ;
						ELSE
							SET Environment.faultNumber = Environment.faultNumber ||':'||CAST(CbsRetryCount AS CHARACTER);
							SET Environment.STATUS= 'DCI_CBS_CRDT_OC_SENT';
						END IF;

					ELSE
						SET Environment.STATUS= 'DCI_CBS_CRDT_OC_FAILED';
					END IF;


					CALL writeToLogFile(flowName, 'dci_info', 'INFO','Failure Response received for Crediting Ordering Customer Account with END_TO_END_ID - '||Environment.txn_end_id) INTO rc;
					CALL writeToLogFile(flowName, 'dci_info', 'INFO','Updating status as DCI_CBS_CRDT_OC_FAILED in TXN table') INTO rc;
					SET Environment.dbQueryCount = '7';
					SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);

				END IF;
			END IF;
			CALL writeToLogFile(flowName, 'dci_info', 'INFO',' -------------------------') INTO rc;
		ELSE
			IF FIELDNAME(InputExceptionList.[1]) IS NOT NULL AND Environment.variables.count >= 1 THEN
				SET OutputExceptionList = InputExceptionList;
				SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
			ELSE
				SET OutputRoot.Properties = Environment.Properties;
				SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				SET OutputExceptionList = InputExceptionList;
				SET Environment.RetryQueue = 'DCI_RETRY_Q';
				PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				SET Environment.Exception = 'True';
			END IF;
		END IF;
	END;
END MODULE;