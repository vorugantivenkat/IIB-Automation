CREATE COMPUTE MODULE CBO_Inward_Mandate_Termination_Compute
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;
	DECLARE flowname CHARACTER MessageFlowLabel;
	DECLARE rc BOOLEAN;
	DECLARE DSN_NAME EXTERNAL CHARACTER;
	DECLARE SCHEMA_NAME EXTERNAL CHARACTER;
	DECLARE MANDATE_TABLE EXTERNAL CHARACTER;
	DECLARE BANKPREFIX EXTERNAL CHARACTER;
	DECLARE srcMsg CHARACTER;


	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONF_FILE) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET msg = 'Log4J Initialization failed.';
		END IF;
		CALL CopyMessageHeaders();
		DECLARE bool BOOLEAN;
		SET bool = CopyEntireMessage();
		RETURN bool;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage()RETURNS BOOLEAN BEGIN
		IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
			
			SET Environment.Properties = InputRoot.Properties;
			SET Environment.XMLNSC = InputRoot.XMLNSC;

			SET Environment.variables.count = 3;
			DECLARE srcMsgBlob BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
			SET srcMsg = CAST(srcMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			SET Environment.srcMsg = srcMsg;

			DECLARE msgid REFERENCE to InputRoot.XMLNSC.ns:Document.ns:MndtCxlReq.ns:GrpHdr.ns:MsgId;
			DECLARE credt REFERENCE to InputRoot.XMLNSC.ns:Document.ns:MndtCxlReq.ns:GrpHdr.ns:CreDtTm;
			DECLARE i INTEGER 1;
			DECLARE ref REFERENCE TO InputRoot.XMLNSC.ns:Document.ns:MndtCxlReq;
			DECLARE orgref REFERENCE TO InputRoot.XMLNSC.ns:Document.ns:MndtCxlReq.ns:UndrlygCxlDtls;
			
			CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','########START#######') INTO rc;
			CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','Request Received for Termination') INTO rc;
			
			SET Environment.OrignlMndtId = orgref.ns:OrgnlMndt.ns:OrgnlMndtId;
			SET Environment.dbQueryCount = '16';
			SET Environment.MsgId = msgid;
			
			CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','DB Cheking for Duplication ,MSGID :'||Environment.MsgId) INTO rc;
			
			CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);

			IF Environment.Exception = 'True' THEN
				RETURN FALSE;
			END IF;
			
			IF Environment.ID IS NOT NULL THEN
				-----Checking Duplicate Message based on Message id-------
				CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','Duplicate Mesage Found ') INTO rc;
				
				SET OutputRoot.XMLNSC.ns1:Document.(XMLNSC.NamespaceDecl)xmlns = ns1;
				SET OutputRoot.XMLNSC.ns1:Document.(XMLNSC.NamespaceDecl)xmlns:ns3 = ns3;
				SET OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:GrpHdr = '';
				DECLARE chref REFERENCE TO OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:GrpHdr;

				SET chref.ns1:MsgId = BANKPREFIX || CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmsssss');
				SET chref.ns1:CreDtTm = CAST(CURRENT_TIMESTAMP as CHARACTER FORMAT 'YYYY-MM-dd''T''HH:mm:ss.sss+hh:mm');
				-- WHILE (i<=nooftxns) DO
				SET OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:UndrlygAccptncDtls = '';
				DECLARE trref REFERENCE TO OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:UndrlygAccptncDtls;
				SET trref.ns1:OrgnlMsgInf.ns1:MsgId = msgid;
				SET trref.ns1:OrgnlMsgInf.ns1:MsgNmId = 'MNDTTERM';
				SET trref.ns1:AccptncRslt.ns1:Accptd = 'False';
				--SET trref.ns1:AccptncRslt.ns1:RjctRsn = 'Duplicate message Received';
				SET trref.ns1:AccptncRslt.ns1:RjctRsn.ns1:Prtry = '-1';
				SET trref.ns1:AccptncRslt.ns1:AddtlRjctRsnInf= 'Message with same MessageId existed in the system';
				SET trref.ns1:OrgnlMndt.ns1:OrgnlMndtId = Environment.OrignlMndtId;
				-- SET i = i+1;
				-- END WHILE;

				CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','Sending Failure Response To CBO') INTO rc;
				PROPAGATE TO TERMINAL 'out' DELETE NONE;
				RETURN FALSE;


			END IF;
			-- Inserting Transaction info in DB table(MANDATE_MGMT_INFO_INWARD) And Also Sending Request to External System
			
			/*Genarating a message id to be updated in db*/
			SET Environment.Variables.CBOMsgId = BANKPREFIX ||CAST(CURRENT_TIMESTAMP as CHARACTER FORMAT 'yyyyMMddHHmmsssss');			
			
			CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','Updating the Database As MandateTerminated') INTO rc;	

			SET Environment.dbQueryCount = '17';
			CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);

			IF Environment.Exception = 'True' THEN
				RETURN FALSE;
			END IF;
			
			
			CALL writeToLogFile(flowname,'MMSIN_INFO','INFO','ISO response to CBO MSG ID is :' || Environment.Variables.CBOMsgId) INTO rc;
			/*Sending Response to CBO */

			SET OutputRoot.XMLNSC.ns1:Document.(XMLNSC.NamespaceDecl)xmlns = ns1;
			SET OutputRoot.XMLNSC.ns1:Document.(XMLNSC.NamespaceDecl)xmlns:ns3 = ns3;
			SET OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:GrpHdr = '';
			DECLARE chref REFERENCE TO OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:GrpHdr;


			SET chref.ns1:MsgId = Environment.Variables.CBOMsgId;
			SET chref.ns1:CreDtTm = CAST(CURRENT_TIMESTAMP as CHARACTER FORMAT 'YYYY-MM-dd''T''HH:mm:ss.sss+hh:mm');
			-- SET Environment.MND_GP_HDR_MSGID = '';

			SET OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:UndrlygAccptncDtls = '';
			DECLARE cbref REFERENCE TO OutputRoot.XMLNSC.ns1:Document.ns1:MndtAccptncRpt.ns1:UndrlygAccptncDtls;

			SET cbref.ns1:OrgnlMsgInf.ns1:MsgId = msgid;
			SET cbref.ns1:OrgnlMsgInf.ns1:MsgNmId = 'MNDTTERM';

			SET cbref.ns1:AccptncRslt.ns1:Accptd = 'True';
			SET cbref.ns1:OrgnlMndt.ns1:OrgnlMndtId = Environment.OrignlMndtId ;
			
			
			RETURN TRUE;

			ELSE
			IF Environment.variables.count >= 1 THEN
				--DECLARE SleepFlow BOOLEAN SLEEP(5*1000);
				--SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				-- SET Environment.variables.count = Environment.variables.count - 1;
				-- SET OutputExceptionList = InputExceptionList;
				-- PROPAGATE TO TERMINAL 'out2' DELETE NONE;
			ELSE
				SET OutputRoot.Properties = Environment.Properties;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(Environment.srcMsg,Environment.Properties.Encoding,Environment.Properties.CodedCharSetId);
				SET OutputExceptionList = InputExceptionList;
				SET Environment.RetryQueue = 'MMS_RETRY_Q';
				PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				SET Environment.Exception = 'True';
				RETURN FALSE;
			END IF;
		END IF;
	END;
END MODULE;