CREATE COMPUTE MODULE CBO_INWARD_Mobile_Router_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE MSG_TYPE CHARACTER FIELDVALUE(InputRoot.XMLNSC.*:envelope.type);
		IF MSG_TYPE IS NULL THEN
			SET MSG_TYPE = FIELDNAME(InputRoot.XMLNSC.*:*.*[2]);
		END IF;
		-- DECLARE MSG_TYPE CHARACTER FIELDNAME(InputRoot.XMLNSC.*:*.*[2]);
		IF MSG_TYPE LIKE 'Encoding' THEN
			--Got XML Declaration
			SET MSG_TYPE = FIELDNAME(InputRoot.XMLNSC.*:*[2].*[2]);

		END IF;

		DECLARE INMSGREF CHARACTER FIELDVALUE(InputRoot.XMLNSC.*:envelope.content);
		IF CONTAINS(INMSGREF,'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>') THEN
			
		DECLARE ref CHARACTER SUBSTRING(INMSGREF AFTER '?>');
		
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (ref,InputProperties.Encoding,InputProperties.CodedCharSetId);
		
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (INMSGREF,InputProperties.Encoding,InputProperties.CodedCharSetId);
		END IF;

		IF MSG_TYPE LIKE 'PACS.008' THEN
			--It is pacs.008.001.05 FIToFICstmrCdtTrf(Mobile Payment inward response message)
			/*removed below code because for inwards we arent receivng request in CDATA */
			-- DECLARE xmlInput REFERENCE TO InputRoot.XMLNSC.*:response.content;
			-- CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (xmlInput, InputProperties.Encoding, InputProperties.CodedCharSetId);
			-- SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBO_MPI_REQ';
		ELSEIF  MSG_TYPE LIKE 'PACS.003' THEN
			SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBO_MPI_DEBIT_REQ';

		/*ELSEIF MSG_TYPE LIKE 'FIToFIPmtStsRpt' THEN
			--It is pacs.002.001.006 FIToFIPmtStsRpt(Response for the payment Outward)
			--DECLARE xmlInput REFERENCE TO InputRoot.XMLNSC.*:response.content;
			--CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (xmlInput, InputProperties.Encoding, InputProperties.CodedCharSetId);
			SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBO_MPO_RES';

		ELSEIF MSG_TYPE LIKE 'CINOUT' THEN
			DECLARE xmlInput REFERENCE TO InputRoot.XMLNSC.*:response.content;
			CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (xmlInput, InputProperties.Encoding, InputProperties.CodedCharSetId);
			SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBO_CINOUT_RES'; */
		ELSE
			--DECLARE xmlInput REFERENCE TO InputRoot.XMLNSC.*:response.content;
			--CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE (xmlInput, InputProperties.Encoding, InputProperties.CodedCharSetId);
			SET OutputRoot.XMLNSC = Environment.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'UNKNOWN_CBO_Q';

		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;