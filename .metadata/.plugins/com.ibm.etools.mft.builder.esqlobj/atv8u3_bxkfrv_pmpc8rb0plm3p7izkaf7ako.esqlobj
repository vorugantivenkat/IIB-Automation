CREATE COMPUTE MODULE DirectDebitOutwardResponse_From_CBS
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;
	DECLARE rc BOOLEAN;
	DECLARE srcMsg CHARACTER;
	DECLARE USER EXTERNAL CHARACTER;
	DECLARE WORK_STATION EXTERNAL CHARACTER;
	DECLARE CHANNEL_RESERVED EXTERNAL CHARACTER;
	DECLARE DSN EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
			SET Environment.Properties = InputRoot.Properties;
			SET Environment.XMLNSC = InputRoot.XMLNSC;
			SET Environment.variables.count = 3;
			DECLARE srcMsgBlob BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
			SET srcMsg = CAST(srcMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			SET Environment.srcMsg = srcMsg;


			DECLARE resStatus CHARACTER InputRoot.XMLNSC.*:Reply.*:Header.*:replyStatus;
			SET Environment.refId = InputRoot.XMLNSC.*:Reply.*:Header.*:transactionReference;
			SET Environment.cbsRef = InputRoot.XMLNSC.*:Reply.*:Data.*:FinancialTransaction.*:reference;
			--DECLARE sts,hedRef ROW;
			--SET sts.data[] = SELECT t.IIB_STATUS FROM Database.{SCH_NAME}.{DDO_TABLE2} AS t WHERE t.CBS_TRAN_REF = refId;
			--SET hedRef.data[] = SELECT k.ORDERING_CUSTOMER_ACCOUNT,c.dd_stlmnt_acc,t.AMOUNT,t.STATUS,k.CURRENCY FROM Database.{SCH_NAME}.{DDO_TABLE1} AS k,Database.{SCH_NAME}.{DDO_TABLE2} AS t ,Database.{SCH_NAME}.{DDO_TABLE3} AS c WHERE k.DD_GRP_HEADER_ID = t.dd_grp_hdr_id_txn_info_fk AND t.CBS_TRAN_REF = refId ;
			DECLARE flowName CHARACTER MessageFlowLabel;
			CALL initLog4j(LOG4J_CONF_FILE) INTO rc;
			IF ( rc = FALSE ) THEN
				DECLARE msg CHARACTER ;
				SET msg = 'Log4J Initialization failed.';
			END IF;


			IF SUBSTRING(Environment.refId FROM 1 FOR 3) = '161' THEN
				IF resStatus = 'FIN' THEN


					SET Environment.dbQueryCount = '24';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);



					CALL writeToLogFile(flowName, 'ddo_info', 'INFO','CBO response is ACPT and CBS response is success - ' || SUBSTRING(Environment.refId FROM 19) || ' and status as DDO_CBS_CRDT_OC_SENT') INTO rc;
				ELSE
					SET Environment.faultString = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultString;
					SET Environment.faultCode = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultCode;
					SET Environment.dbQueryCount = '25';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);


				END IF;
			ELSEIF SUBSTRING(Environment.refId FROM 1 FOR 3) = '160' THEN
				IF resStatus = 'FIN' THEN
					SET Environment.dbQueryCount = '27';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					SET Environment.cbsTranRef = '169' ||CAST(CURRENT_TIMESTAMP as CHARACTER FORMAT 'yyMMddHHmmssSSS');
					DECLARE space1 NAMESPACE 'http://www.oab.com';
					DECLARE refId REFERENCE TO InputRoot.XMLNSC.space1:Request.space1:Header.transactionReference; --no need
					SET OutputRoot.XMLNSC.space1:Request.(XMLNSC.NamespaceDecl)xmlns:urn = space1;
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.space1:channel = Environment.hedRef.data.CHANNEL;
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.space1:user = USER;
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.space1:workstation = WORK_STATION;
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.transactionDate = CAST(CURRENT_DATE as CHARACTER FORMAT 'yyyy-MM-dd');
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.transactionTime = CAST(CURRENT_TIME as CHARACTER FORMAT 'HH:mm:ss');
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.space1:transactionReference = Environment.cbsTranRef;
					SET OutputRoot.XMLNSC.space1:Request.space1:Header.space1:channelReserved = CHANNEL_RESERVED;
					--------------Retriving currency from data base------------					
					--Credit----
					SET OutputRoot.XMLNSC.space1:Request.space1:Data.space1:SingleEntryFinancialTransaction.(XMLNSC.Attribute)optionIdentifier = Environment.hd.PURP_OF_TRANSFER||'_DDO_SENT_CBS_CRDT_OC';
					SET OutputRoot.XMLNSC.space1:Request.space1:Data.space1:SingleEntryFinancialTransaction.space1:account = Environment.hedRef.data.ORDERING_CUSTOMER_ACCOUNT;
					SET OutputRoot.XMLNSC.space1:Request.space1:Data.space1:SingleEntryFinancialTransaction.space1:amount = '+' ||CAST(Environment.hd.AMOUNT AS CHARACTER FORMAT '0.00');
					SET OutputRoot.XMLNSC.space1:Request.space1:Data.space1:SingleEntryFinancialTransaction.space1:currency = Environment.hedRef.data.CURRENCY;

					DECLARE cbsBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					SET Environment.cbsMsg = CAST(cbsBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

					SET Environment.dbQueryCount = '27A';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					PROPAGATE TO TERMINAL 'out4';

					CALL writeToLogFile(flowName, 'ddo_info', 'INFO','CBO response is RJCT and CBS response is success for Debiting OC - ' || SUBSTRING(Environment.refId FROM 19) || ' and status as DDO_CBS_CRDT_OC_SENT') INTO rc;
				ELSE
					SET Environment.faultString = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultString;
					SET Environment.faultCode = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultCode;
					SET Environment.dbQueryCount = '28';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);


					CALL writeToLogFile(flowName, 'ddo_info', 'INFO','CBO response is RJCT and CBS response is failure for Debiting OC- ' || SUBSTRING(Environment.refId FROM 19) || ' and status as DDO_CBS_CRDT_OC_SENT') INTO rc;
				END IF;

			ELSE



				IF resStatus = 'FIN' THEN
					SET Environment.dbQueryCount = '28A';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					CALL writeToLogFile(flowName, 'ddo_info', 'INFO','CBO response is RJCT and CBS response is success CREDIT OC - - ' || SUBSTRING(Environment.refId FROM 19) || ' and status as DDO_CBS_CRDT_OC_SUCCESS') INTO rc;
				ELSE
					SET Environment.faultString = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultString;
					SET Environment.faultCode = InputRoot.XMLNSC.*:Reply.*:Fault.*:faultCode;
					SET Environment.dbQueryCount = '28B';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					CALL writeToLogFile(flowName, 'ddo_info', 'INFO','CBO response is RJCT and CBS response is failure for CREDIT OC - ' || SUBSTRING(Environment.refId FROM 19) || ' and status as DDO_CBS_CRDT_OC_FAILED') INTO rc;
				END IF;



			END IF;


		ELSE
			IF Environment.variables.count >= 1 THEN
				--DECLARE SleepFlow BOOLEAN SLEEP(5*1000);
				--SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				-- SET Environment.variables.count = Environment.variables.count - 1;
				-- SET OutputExceptionList = InputExceptionList;
				-- PROPAGATE TO TERMINAL 'out2' DELETE NONE;
			ELSE
				SET OutputRoot.Properties = Environment.Properties;

				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(Environment.srcMsg,Environment.Properties.Encoding,Environment.Properties.CodedCharSetId);

				SET OutputExceptionList = InputExceptionList;
				SET Environment.RetryQueue = 'DDO_RETRY_Q';
				PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				SET Environment.Exception = 'True';

			END IF;
		END IF;

	END;
	CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
	RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";

	CREATE FUNCTION writeToLogFile( IN COMPONENT_NAME CHARACTER,
	IN LOGGER_NAME CHARACTER,
	IN LEVEL CHARACTER,
	IN TEXT CHARACTER )
	RETURNS BOOLEAN
	LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
END MODULE;