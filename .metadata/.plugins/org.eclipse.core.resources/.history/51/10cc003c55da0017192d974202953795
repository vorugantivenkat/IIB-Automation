package com.oab.digitalsign;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.cert.CertificateException;


import org.apache.commons.codec.binary.StringUtils;

public class sign {

/*
	 public static void main(String[] args) {
		
	String keyStore = "C:/IIBWorkspace/OmanArabBank/DigitalSignAndVerify_XML_OAB/src/resources/OAB.jks";
	 String keyPass = "oab"; 
	String alias = "oab_ach"; 
	String orgtxt = "";
	String signtxt = "mrhBTbBdF8y4EjArL0jjvWJ3wLiq+Y71S4nPMtVyuuN6L831HTSREcASy2jGoxL4C25BWAs7kb+R94OcoPha7P4dGVjGxspFcB0qd4F+uk0nozfPr8rdArzwQRkWsCDEKnZGzy/Dq78WRux+t0jhvjRQBnzqvhWucR26BA9d1AoZ7/VUSgdzQgTIA21dAsHQUWgyeXOW76CClnCr4KR0LEajRKEdLRSeRbR3ocGai2qwRUig/3DhpcpnxPvsecZCyQ/z12pmWFMQWUUestm+jPVUnyPiotH/zTKCyhtuV5fgweCWjtUynaR9WOwxRfSBi66OHuawdZUPTJAgWOQdGw==";
	
	boolean result = verifySign(orgtxt, signtxt, keyStore, keyPass);
	
	 }*/
	public static String getDigitalsign(String msgContent, String keyStore,
			String keyPass) {
		Signature sig;
		String digSignVal = null;
	//	String Test = null;
		String type = "sign";
		try {
			// String type = "sign";
			KeyStore key = loadKeyStore(new File(keyStore), keyPass, "JKS");
			sig = Signature.getInstance("SHA256withRSA");
			if (type.equalsIgnoreCase("sign")) {
				PrivateKey privateKey = (PrivateKey) key.getKey("omabomru",
						keyPass.toCharArray());
				// sig.initSign((PrivateKey) key.getKey(alias,
				// pass.toCharArray()));
				sig.initSign(privateKey);
				// Test = StringEscapeUtils.escapeJava(msgContent);
				// /msgContent = "hello";

				System.out.println("input message content testOAB" + msgContent);
				sig.update(StringUtils.getBytesUtf8(msgContent));
				// sig.update(msgContent.getBytes());
				// System.out.println(Base64.encodeBase64String(sig.sign()));
				digSignVal = Base64.encodeBase64String(sig.sign());
				

			}/*
			 * else {
			 * 
			 * sig.initVerify(key.getCertificate(alias).getPublicKey());
			 * sig.update
			 * (StringUtils.getBytesUtf8(loadfile("originalText.txt")));
			 * System.out
			 * .println(sig.verify(Base64.decodeBase64(loadfile("signedText.txt"
			 * )))); }
			 */
		} catch (Exception e) {

			e.printStackTrace();
		}
		System.out.println("digital sign value oab testOAB" + digSignVal);
		return digSignVal;
	}
	public static Boolean verifySign(String orginalTxt,String signtTxt, String keyStore,String keyPass)
	{
		Signature sig;
		String alias = "oab";
		boolean val = false;
		
		try {
			KeyStore key = loadKeyStore(new File(keyStore), keyPass, "JKS");
			sig = Signature.getInstance("SHA256withRSA");
			
			sig.initVerify(key.getCertificate(alias).getPublicKey());
			
			//String txt = loadfile("C:/IIBWorkspace/OmanArabBank/DigitalSignAndVerify_XML_OAB/src/resources/sampleXMlsignedContent.xml");
			//sig.update(StringUtils.getBytesUtf8(txt));
			sig.update(StringUtils.getBytesUtf8(orginalTxt));
			
			val = sig.verify(Base64.decodeBase64(signtTxt));
			//System.out.println(sig.verify(Base64.decodeBase64(signtTxt)));
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		
		return val;
	}

//	private static byte[] hexStringToByteArray(String signtTxt) {
//		// TODO Auto-generated method stub
//		return null;
//	}
	@SuppressWarnings("deprecation")
	public static KeyStore loadKeyStore(final File keystoreFile,
			final String password, final String keyStoreType)
			throws KeyStoreException, IOException, NoSuchAlgorithmException,
			CertificateException {
		if (null == keystoreFile) {
			throw new IllegalArgumentException("Keystore url may not be null");
		}
		final KeyStore keystore = KeyStore.getInstance(keyStoreType);
		InputStream is = null;
		try {
			is = keystoreFile.toURL().openStream();
			keystore.load(is, null == password ? null : password.toCharArray());

		} finally {
			if (null != is) {
				is.close();
			}
		}
		return keystore;
	}

	public static String loadfile(String aFileName) throws IOException {
		String contents = new String(Files.readAllBytes(Paths.get(aFileName)));

		return contents;

	}
}