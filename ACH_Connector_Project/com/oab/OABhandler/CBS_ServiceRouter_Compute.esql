

BROKER SCHEMA com.oab.OABhandler

CREATE COMPUTE MODULE CBS_ServiceRouter_Compute
	DECLARE rc BOOLEAN;
	DECLARE flowName CHARACTER MessageFlowLabel;
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;


	DECLARE MSG_TYPE CHARACTER; --global declaration
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();

		CALL initLog4j(LOG4J_CONF_FILE) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET msg = 'Log4J Initialization failed.';
		END IF;
		
		CALL CopyEntireMessage();		
--		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		SET MSG_TYPE = FIELDNAME(InputRoot.XMLNSC.*[1]);
		DECLARE INT_CODE CHARACTER InputRoot.XMLNSC.*:msg.*:msg_header.*:interface_code;
		IF MSG_TYPE LIKE 'XmlDeclaration' THEN
			--Got XML Declaration
			SET MSG_TYPE = FIELDNAME(InputRoot.XMLNSC.*[2]);

		END IF;

		IF MSG_TYPE LIKE 'AchBatchStatusRequest' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ACH_STATUS_Q_REQ';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for AchBatchStatusRequest') INTO rc;

		ELSEIF MSG_TYPE LIKE 'AchDirectCredit' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_DCO_Q_REQ';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for DirectCreditOutward') INTO rc;
		ELSEIF MSG_TYPE LIKE 'AchDirectDebit' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_DDO_Q_REQ';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for DirectDebitOutward') INTO rc;
		ELSEIF MSG_TYPE LIKE 'AchBatchCancellation' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_CANO_ROUTER_REQ';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for ACHBatchCancellation and routed to CANO_REVO_RETO_Router') INTO rc;
		ELSEIF MSG_TYPE LIKE 'AchDirectCreditRecovery' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ACH_FRC_RTRY_Q';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for ACHDataRecovery') INTO rc;
		ELSEIF INT_CODE LIKE '21' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MobileOutward') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_MPOUT_REQ';
		ELSEIF INT_CODE LIKE '22' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MobileCASHIN') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_CASHINOUT_REQ';
		ELSEIF INT_CODE LIKE '23' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MobileCASHOUT') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_CASHINOUT_REQ';
		ELSEIF MSG_TYPE LIKE 'AchMandateInitiation' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MandateInitiation') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_MINT_REQ';
		ELSEIF MSG_TYPE LIKE 'AchMandateAmendment' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MandateAmendment') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_MAME_REQ';
		ELSEIF MSG_TYPE LIKE 'AchMandateTermination' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MandateTermination') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_MTER_REQ';

		ELSEIF MSG_TYPE LIKE 'WpsAddRegulatedEntities' THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_WPS_ADD_Q_REQ';
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for ACHBatchCancellation and routed to OAB_WPS_ADD_Q_REQ router') INTO rc;

		ELSEIF MSG_TYPE LIKE 'WpsSifValidation' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for WpsSifValidation') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'WPS_SIF_Q';

		ELSEIF MSG_TYPE LIKE 'WpsSifProcess' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for WpsSifProcess') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'WPS_CBO_Q';


		ELSEIF MSG_TYPE LIKE 'WpsSifStatusRequest' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for Wps status report') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'WPS_STATUS_REQ_Q';
		ELSEIF INT_CODE LIKE '28' THEN
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Message received for MPClear') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'OAB_MPCLR_REQ';

		ELSEIF MSG_TYPE LIKE 'Reply' THEN
			--We got response from CBS
			DECLARE CBS_INT_CODE CHARACTER InputRoot.XMLNSC.*:Reply.*:Header.*:transactionReference;

			IF CBS_INT_CODE LIKE '10%' THEN
				--Direct Credit Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for DirectCreditInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_DCI_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '11%' THEN
				--Direct Debit Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for DirectDebitInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_DDI_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '12%' THEN
				--Cancillation Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for CancellationInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_CANI_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '13%' THEN
				--Reversal Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for ReversalInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_REVI_RES';
			ELSEIF CBS_INT_CODE LIKE '14%' THEN
				--Return Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for ReturnInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_RETI_Q_RES';

			ELSEIF CBS_INT_CODE LIKE '15%' THEN
				--Direct Credit Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for DirectCreditOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_DCO_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '16%' THEN
				--Direct Debit Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for DirectDebitOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_DDO_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '17%' THEN
				--Cancillation Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for CancellationOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_CANO_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '18%' THEN
				--Reversal Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for ReversalOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_REVO_Q_RES';
			ELSEIF CBS_INT_CODE LIKE '19%' THEN
				--Return Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for ReturnOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_RETO_Q_RES';

			ELSEIF CBS_INT_CODE LIKE '20%' THEN
				--Mobile Payment Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for MobikePaymentInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_MPI_RES';
			ELSEIF CBS_INT_CODE LIKE '21%' THEN
				--Mobile Payment Outward Response from CBS.
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for MobilePaymentOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_MPO_RES';

			ELSEIF CBS_INT_CODE LIKE '22%' THEN
				--Mobile Cash Inward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for CancellationInward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_CIN_RES';
			ELSEIF CBS_INT_CODE LIKE '23%' THEN
				--Mobile Cash Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for CancellationOutward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_COUT_RES';

			ELSEIF CBS_INT_CODE LIKE '24%' THEN
				--Mobile Cash Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for WPS') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_WPS_RES';
			ELSEIF CBS_INT_CODE LIKE '25%' THEN
				--Mobile Cash Outward Response from CBS
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for MobilePayment_Debit_Inward') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'CBS_MPI_DEBIT_RES';

			ELSE --else under else --> if
				-- Unknown format from CBS Response
				CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','CBS Resposne Message received for Unknowformat and stored in UNKNOWN_CBS_Q ') INTO rc;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'UNKNOWN_CBS_Q';
			END IF;


		ELSE
			-- Unknown format from OAB
			CALL writeToLogFile(flowName, 'OABRouter_INFO', 'INFO','Unknow format received from OAB') INTO rc;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'UNKNOWN_Q';
		END IF;
		-- END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
END MODULE;


CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";




CREATE FUNCTION writeToLogFile( IN COMPONENT_NAME CHARACTER,
IN LOGGER_NAME CHARACTER,
IN LEVEL CHARACTER,
IN TEXT CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";