BROKER SCHEMA com.oab.cbsretry

CREATE COMPUTE MODULE CBS_Failure_Handler_Compute
	DECLARE SCH_NAME EXTERNAL CHARACTER;
	DECLARE DCO_TABLE1 EXTERNAL CHARACTER;
	DECLARE DCO_TABLE2 EXTERNAL CHARACTER;
	DECLARE DDO_TABLE1 EXTERNAL CHARACTER;
	DECLARE DDO_TABLE2 EXTERNAL CHARACTER;
	DECLARE DCI_TABLE2 EXTERNAL CHARACTER;
	DECLARE DDI_TABLE2 EXTERNAL CHARACTER;
	DECLARE REVI_TABLE2 EXTERNAL CHARACTER;
	DECLARE RETI_TABLE2 EXTERNAL CHARACTER;
	DECLARE RETO_TABLE2 EXTERNAL CHARACTER;
	DECLARE CANI_TABLE2 EXTERNAL CHARACTER;
	DECLARE WPS_TABLE1 EXTERNAL CHARACTER;
	DECLARE WPS_TABLE2 EXTERNAL CHARACTER;
	DECLARE presentTime TIMESTAMP CURRENT_TIMESTAMP;
	DECLARE pattern CHARACTER 'yyMMddHHmm';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		/*CBS RETRY FOR DCO*/
		DECLARE status,Record ROW;
		SET status.GP[] = SELECT J.STATUS,J.CBS_REQUEST_MESSAGE,J.FAULT_CODE,J.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DCO_TABLE1} AS J WHERE J.STATUS = 'DCO_CBS_DBT_OC_SENT';
		SET Record.TX[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DCO_TABLE2} AS K WHERE K.STATUS = 'DCO_CBS_CRDT_DCSETLACC_SENT';
		SET Record.CP[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DCO_TABLE2} AS K WHERE K.STATUS = 'DCO_CBS_CRDT_OC_SENT';
		
		
		/*Retrying for debiting ordering customer account*/
		DECLARE groupRef REFERENCE TO status.GP[>];
		DECLARE txRef REFERENCE TO Record.TX[>];
		DECLARE TxnRef REFERENCE TO Record.CP[>];
		
		DECLARE transctiontime TIMESTAMP;
		WHILE LASTMOVE(groupRef) DO
			DECLARE transref CHARACTER SUBSTRING(groupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET transctiontime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > transctiontime THEN
				IF groupRef.STATUS = 'DCO_CBS_DBT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(groupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE groupRef NEXTSIBLING;
		END WHILE;
		/*Retrying for crediting settlement account*/
		WHILE LASTMOVE(txRef) DO
			DECLARE transref CHARACTER SUBSTRING(txRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET transctiontime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > transctiontime THEN
				IF txRef.STATUS = 'DCO_CBS_CRDT_DCSETLACC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(txRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE txRef NEXTSIBLING;
		END WHILE;
		
			/*Retrying for crediting ordering customer account(RJCT CASE)*/
			WHILE LASTMOVE(TxnRef) DO
			DECLARE transref CHARACTER SUBSTRING(TxnRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET transctiontime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > transctiontime THEN
				IF TxnRef.STATUS = 'DCO_CBS_CRDT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(TxnRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE TxnRef NEXTSIBLING;
		END WHILE;
		
		
		/*CBS RETRY FOR DDO*/
		DECLARE ddStatus ROW;
		SET ddStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DDO_TABLE2} AS K WHERE K.STATUS = 'DDO_SENT_CBS_CRDT_OC' OR K.STATUS = 'DDO_SENT_CBS_CRDT_DBT_OC';
		DECLARE DDGroupRef REFERENCE TO ddStatus.tx[>];
		DECLARE ddtransctiontime TIMESTAMP;
		WHILE LASTMOVE(DDGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(DDGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET ddtransctiontime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > ddtransctiontime THEN
				IF DDGroupRef.STATUS = 'DDO_SENT_CBS_CRDT_OC' OR DDGroupRef.STATUS = 'DDO_SENT_CBS_CRDT_DBT_OC' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(DDGroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE DDGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR DCI*/
		DECLARE dciStatus ROW;
		DECLARE faultNumber INTEGER;
		SET dciStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DCI_TABLE2} AS K WHERE K.STATUS = 'DCI_CBS_CRDT_OC_SENT';
		
		DECLARE DCIGroupRef REFERENCE TO dciStatus.tx[>];
		DECLARE dciTransctionTime TIMESTAMP;
		WHILE LASTMOVE(DCIGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(DCIGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			
			SET dciTransctionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > dciTransctionTime THEN
				IF DCIGroupRef.STATUS = 'DCI_CBS_CRDT_OC_SENT'  THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(DCIGroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE DCIGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR DDI*/
		DECLARE ddiStatus ROW;
		SET ddiStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{DDI_TABLE2} AS K WHERE K.STATUS = 'DDI_CBS_DBT_OC_SENT';
		DECLARE DDIGroupRef REFERENCE TO ddiStatus.tx[>];
		DECLARE ddiTransactionTime TIMESTAMP;
		WHILE LASTMOVE(DDIGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(DDIGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET ddiTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > ddiTransactionTime THEN
				IF DDIGroupRef.STATUS = 'DDI_CBS_DBT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(DDIGroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE DDIGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR REVERSAL INWARDS*/
		DECLARE ReviStatus ROW;
		SET ReviStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{REVI_TABLE2} AS K WHERE K.STATUS = 'REVI_DBT_OC_SENT';
		DECLARE REVIGroupRef REFERENCE TO ReviStatus.tx[>];
		DECLARE reviTransactionTime TIMESTAMP;
		WHILE LASTMOVE(REVIGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(REVIGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET reviTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > reviTransactionTime THEN
				IF REVIGroupRef.STATUS = 'REVI_DBT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(REVIGroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE REVIGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR RETURN INWARDS*/
		DECLARE RetiStatus ROW;
		SET RetiStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{RETI_TABLE2} AS K WHERE K.STATUS = 'RETI_CBS_CRDT_OC_SENT';
		DECLARE RETIGroupRef REFERENCE TO RetiStatus.tx[>];
		DECLARE retiTransactionTime TIMESTAMP;
		WHILE LASTMOVE(RETIGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(RETIGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET retiTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > retiTransactionTime THEN
				IF RETIGroupRef.STATUS = 'RETI_CBS_CRDT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(RETIGroupRef.CBS_REQUEST,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;

			END IF;
			MOVE RETIGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR RETURN OUTWARDS*/
		DECLARE RetoStatus ROW;
		SET RetoStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST,K.CBS_FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{RETO_TABLE2} AS K WHERE K.STATUS = 'RETO_DDO_CBS_SENT' OR K.STATUS = 'RETO_DCI_CBS_SENT' OR K.STATUS = 'RETO_DCI_CBS_CRDT_OC_SENT' OR K.STATUS = 'RETO_DDO_CBS_CRDT_OC_SENT';
		DECLARE RETOGroupRef REFERENCE TO RetoStatus.tx[>];
		DECLARE retoTransactionTime TIMESTAMP;
		WHILE LASTMOVE(RETOGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(RETOGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET retoTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > retoTransactionTime THEN
				IF RETOGroupRef.STATUS = 'RETO_DDO_CBS_SENT' OR RETOGroupRef.STATUS = 'RETO_DCI_CBS_CRDT_OC_SENT' OR RETOGroupRef.STATUS = 'RETO_DDO_CBS_CRDT_OC_SENT' OR RETOGroupRef.STATUS = 'RETO_DCI_CBS_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(RETOGroupRef.CBS_REQUEST,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE RETOGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR REVERSAL OUTWARDS*/
		DECLARE RevoStatus ROW;
		SET RevoStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST,K.CBS_FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{RETO_TABLE2} AS K WHERE K.STATUS = 'REVO_DCO_CBS_CRDT_OC_SENT' OR K.STATUS = 'REVO_DDI_CBS_CRDT_OC_SENT';
		DECLARE REVOGroupRef REFERENCE TO RevoStatus.tx[>];
		DECLARE revoTransactionTime TIMESTAMP;
		WHILE LASTMOVE(REVOGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(REVOGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET revoTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > revoTransactionTime THEN
				IF REVOGroupRef.STATUS = 'REVO_DCO_CBS_CRDT_OC_SENT' OR REVOGroupRef.STATUS = 'REVO_DDI_CBS_CRDT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(REVOGroupRef.CBS_REQUEST,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE REVOGroupRef NEXTSIBLING;
		END WHILE;
		/*CBS RETRY FOR CANCELLATION OUTWARDS*/
		DECLARE CanoStatus ROW;
		SET CanoStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST,K.CBS_FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{RETO_TABLE2} AS K WHERE K.STATUS = 'CANO_DCO_CRDT_OC_CBS_SENT' OR K.STATUS = 'CANO_REVERSAL_OC_CREDIT_SENT' OR K.STATUS = 'CANO_REVERSAL_OC_CREDIT';
		DECLARE CANOGroupRef REFERENCE TO CanoStatus.tx[>];
		DECLARE canoTransactionTime TIMESTAMP;
		WHILE LASTMOVE(CANOGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(CANOGroupRef.CBS_TRAN_REF FROM 5 FOR 10);
			SET canoTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > canoTransactionTime THEN
				IF CANOGroupRef.STATUS = 'CANO_DCO_CRDT_OC_CBS_SENT' OR CANOGroupRef.STATUS = 'CANO_REVERSAL_OC_CREDIT' OR CANOGroupRef.STATUS = 'CANO_REVERSAL_OC_CREDIT_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(CANOGroupRef.CBS_REQUEST,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE CANOGroupRef NEXTSIBLING;
		END WHILE;
		
			/*CBS RETRY FOR CANCELLATION INWARDS*/
		DECLARE CaniStatus ROW;
		SET CaniStatus.tx[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.FAULT_CODE,K.CBS_TRAN_REF FROM Database.{SCH_NAME}.{CANI_TABLE2} AS K WHERE K.STATUS = 'CANI_EXTSYS_DBT_OC_SENT' ;
		DECLARE CANIGroupRef REFERENCE TO CaniStatus.tx[>];
		DECLARE caniTransactionTime TIMESTAMP;
		WHILE LASTMOVE(CANIGroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(CANIGroupRef.CBS_TRAN_REF FROM 4 FOR 10);
			SET caniTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > caniTransactionTime THEN
				IF CANIGroupRef.STATUS = 'CANI_EXTSYS_DBT_OC_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(CANIGroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE CANIGroupRef NEXTSIBLING;
		END WHILE;
		
		/*CBS RETRY FOR WPS FOR HEADER TABLE CBS REQ SENT STATUS*/
		DECLARE WPSHstatus ROW;
		SET WPSHstatus.GP[] = SELECT J.CBO_STATUS,J.CBS_REQUEST_MESSAGE,J.CBS_FAULT_CODE,J.CBS_TXN_REF FROM Database.{SCH_NAME}.{WPS_TABLE1}AS J WHERE J.CBO_STATUS = 'CBS_PAYER_DEBIT_SENT';
		DECLARE WPSgroupRef REFERENCE TO WPSHstatus.GP[>];
		DECLARE WPSHeaderTableTransactionTime TIMESTAMP;
		WHILE LASTMOVE(WPSgroupRef) DO
			DECLARE transref CHARACTER SUBSTRING(WPSgroupRef.CBS_TXN_REF FROM 4 FOR 10);
			SET WPSHeaderTableTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > WPSHeaderTableTransactionTime THEN
				IF WPSgroupRef.CBO_STATUS = 'CBS_PAYER_DEBIT_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(WPSgroupRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE WPSgroupRef NEXTSIBLING;
		END WHILE;
	--	CBS RETRY FOR WPS FOR TRANSACTION TABLE REQ CBS SENT STATUS
		DECLARE WPSTstatus ROW;
		SET WPSTstatus.TX[] = SELECT K.STATUS,K.CBS_REQUEST_MESSAGE,K.CBS_FAULT_CODE,K.TXN_REF_ID FROM Database.{SCH_NAME}.{WPS_TABLE2} AS K WHERE K.STATUS = 'CBS_EMP_CREDIT_REQ_SENT' OR K.STATUS = 'CBS_STLEACC_CREDIT_REQ_SENT' OR K.STATUS = 'CBS_PAYER_CRDIT_SENT' ;
		DECLARE WPStxRef REFERENCE TO WPSTstatus.TX[>];
		DECLARE WPSTransactionTableTransactionTime TIMESTAMP;
		WHILE LASTMOVE(WPStxRef) DO
			DECLARE transref CHARACTER SUBSTRING(WPStxRef.TXN_REF_ID FROM 4 FOR 10);
			SET WPSTransactionTableTransactionTime = CAST(transref AS TIMESTAMP FORMAT pattern) + INTERVAL '10' MINUTE;
			IF presentTime > WPSTransactionTableTransactionTime THEN
				IF WPStxRef.STATUS = 'CBS_STLEACC_CREDIT_REQ_SENT' OR WPStxRef.STATUS = 'CBS_PAYER_CRDIT_SENT' OR WPStxRef.STATUS = 'CBS_EMP_CREDIT_REQ_SENT' THEN
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(WPStxRef.CBS_REQUEST_MESSAGE,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					PROPAGATE TO TERMINAL 'out';
				END IF;
			END IF;
			MOVE WPStxRef NEXTSIBLING;
		END WHILE;

		
		
	END;
END MODULE;